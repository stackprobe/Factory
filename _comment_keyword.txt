----
固有の意味を持つコメント

// ts_

	スレッドセーフである。

// mbs_

	マルチバイト文字を考慮している。

// access free

	構造体メンバに自由にアクセスして良い。(全部 public みたいな)

// ? xxx

	条件 xxx が真ならば...

// ? ! xxx

	条件 xxx が偽ならば...

// ppp: xxx

	引数 ppp は xxx である。

// ret: xxx

	戻り値は xxx である。

// xxx: yyy == zzz

	xxx が yyy のときは zzz である。

	例
		ret: NULL == 失敗     ---->     戻り値が NULL のときは失敗である。

// "XYZ"

	'X', 'Y', 'Z' の値を取る。

// "XYZ" == xxx, yyy, zzz

	'X', 'Y', 'Z' の値を取り、
	'X' の意味は xxx, 'Y' の意味は yyy, 'Z' の意味は zzz である。

// 2bs

	to be safe
	安全やわかりやすさのために実行しているだけで、実行しなくても良いかもしれない。

// 2bs?

	元は "// 2bs" だったけど、今や実行しなければならない可能性が高い。

// xxx

	一般的なアノテーションにおける TODO, HACK の意味で使用している。

// fixme

	一般的なアノテーションにおける TODO, HACK の意味で使用している。

// TODO

	一般的なアノテーションにおける TODO, FIXME, HACK の意味で使用している。

// todo

	元は "// TODO" だったけど、今や対応する価値は無いと考えている。


----
固有の意味を持つ識別子内の接頭辞・接尾辞・パターン

x_

	戻り値は呼び出し側で開放しなければならない。

c_

	戻り値は呼び出し側で開放してはならない。

_x

	引数は関数内で開放される。

_c

	引数は関数内で開放されない。

	-- -- --

	★補足
		_xx, _ccc, _xcx, _ccxc のように組み合わせることがある。
		xc の並びは引数の並びに一致する。
		xc の並びの個数が引数の個数より少ないことがある。(開放の有無の議論が無い引数は飛ばすため)

	-- -- --


- - -

ne_

	戻り値が NULL になる場合は error(); にする。

nn_

	戻り値が NULL になる場合は代替値を返す。

/* 廃止
ts_

	スレッドセーフである。
*/

mbs_

	マルチバイト文字を考慮している。

m_

	マクロである。

- - -

get と ref

	get ... 値や要素を取得する。目的の値や要素は存在しなければならない。
	ref ... 値や要素を取得する。目的の値や要素が存在しなければ代替値を返す。

set と put

	set ... 値や要素を設定する。設定先の領域は確保されていなければならない。
	put ... 値や要素を設定する。設定先の領域が確保されていなければ領域の確保も行う。

add と unadd

	add   ... リストの最後に追加
	unadd ... リストの最後から取り出す。(addの逆)

insert と desert

	insert ... リストの指定位置に挿入
	desert ... リストの指定位置から取り出す。(insertの逆)


- - -

2

	To

	例
		c2upper        ---->     c To upper
		line2JLine     ---->     line To JLine

